// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	categoryFieldNames          = builder.RawFieldNames(&Category{})
	categoryRows                = strings.Join(categoryFieldNames, ",")
	categoryRowsExpectAutoSet   = strings.Join(stringx.Remove(categoryFieldNames, "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	categoryRowsWithPlaceHolder = strings.Join(stringx.Remove(categoryFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"
)

type (
	categoryModel interface {
		Insert(ctx context.Context, data *Category) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Category, error)
		FindOneById(ctx context.Context, id string) (*Category, error)
		Update(ctx context.Context, data *Category) error
		Delete(ctx context.Context, id string) error
	}

	defaultCategoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Category struct {
		Id         string         `db:"id"`
		ParentId   sql.NullString `db:"parent_id"`
		Name       string         `db:"name"`
		Level      int64          `db:"level"`
		BillbookId string         `db:"billbook_id"`
		CreatedAt  time.Time      `db:"created_at"`
		UpdatedAt  sql.NullTime   `db:"updated_at"`
		IsDeleted  bool           `db:"is_deleted"`
	}
)

func newCategoryModel(conn sqlx.SqlConn) *defaultCategoryModel {
	return &defaultCategoryModel{
		conn:  conn,
		table: "`category`",
	}
}

func (m *defaultCategoryModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCategoryModel) FindOne(ctx context.Context, id string) (*Category, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", categoryRows, m.table)
	var resp Category
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCategoryModel) FindOneById(ctx context.Context, id string) (*Category, error) {
	var resp Category
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", categoryRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCategoryModel) Insert(ctx context.Context, data *Category) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, categoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.ParentId, data.Name, data.Level, data.BillbookId, data.IsDeleted)
	return ret, err
}

func (m *defaultCategoryModel) Update(ctx context.Context, newData *Category) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, categoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ParentId, newData.Name, newData.Level, newData.BillbookId, newData.IsDeleted, newData.Id)
	return err
}

func (m *defaultCategoryModel) tableName() string {
	return m.table
}
