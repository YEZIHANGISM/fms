// Code generated by goctl. DO NOT EDIT!

package postgres

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	assetFieldNames          = builder.RawFieldNames(&Asset{}, true)
	assetRows                = strings.Join(assetFieldNames, ",")
	assetRowsExpectAutoSet   = strings.Join(stringx.Remove(assetFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	assetRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(assetFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	assetModel interface {
		Insert(ctx context.Context, data *Asset) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Asset, error)
		Update(ctx context.Context, data *Asset) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAssetModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Asset struct {
		Id          int64        `db:"id"`
		Name        string       `db:"name"`
		AssetCateId int64        `db:"asset_cate_id"`
		Hide        sql.NullBool `db:"hide"`
		CountInto   sql.NullBool `db:"count_into"`
		Balance     int64        `db:"balance"`
		Unit        string       `db:"unit"`
		CreatedAt   time.Time    `db:"created_at"`
		UpdatedAt   sql.NullTime `db:"updated_at"`
		IsDeleted   bool         `db:"is_deleted"`
	}
)

func newAssetModel(conn sqlx.SqlConn) *defaultAssetModel {
	return &defaultAssetModel{
		conn:  conn,
		table: `"public"."asset"`,
	}
}

func (m *defaultAssetModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAssetModel) FindOne(ctx context.Context, id int64) (*Asset, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", assetRows, m.table)
	var resp Asset
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssetModel) Insert(ctx context.Context, data *Asset) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)", m.table, assetRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.AssetCateId, data.Hide, data.CountInto, data.Balance, data.Unit, data.CreatedAt, data.UpdatedAt, data.IsDeleted)
	return ret, err
}

func (m *defaultAssetModel) Update(ctx context.Context, data *Asset) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, assetRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.AssetCateId, data.Hide, data.CountInto, data.Balance, data.Unit, data.CreatedAt, data.UpdatedAt, data.IsDeleted)
	return err
}

func (m *defaultAssetModel) tableName() string {
	return m.table
}
