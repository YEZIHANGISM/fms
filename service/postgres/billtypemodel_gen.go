// Code generated by goctl. DO NOT EDIT!

package postgres

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	billTypeFieldNames          = builder.RawFieldNames(&BillType{}, true)
	billTypeRows                = strings.Join(billTypeFieldNames, ",")
	billTypeRowsExpectAutoSet   = strings.Join(stringx.Remove(billTypeFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	billTypeRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(billTypeFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	billTypeModel interface {
		Insert(ctx context.Context, data *BillType) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BillType, error)
		Update(ctx context.Context, data *BillType) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBillTypeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	BillType struct {
		Id         int64         `db:"id"`
		BillType   string        `db:"bill_type"`
		AssetOutId sql.NullInt64 `db:"asset_out_id"`
		AssetInId  sql.NullInt64 `db:"asset_in_id"`
	}
)

func newBillTypeModel(conn sqlx.SqlConn) *defaultBillTypeModel {
	return &defaultBillTypeModel{
		conn:  conn,
		table: `"public"."bill_type"`,
	}
}

func (m *defaultBillTypeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBillTypeModel) FindOne(ctx context.Context, id int64) (*BillType, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", billTypeRows, m.table)
	var resp BillType
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBillTypeModel) Insert(ctx context.Context, data *BillType) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4)", m.table, billTypeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.BillType, data.AssetOutId, data.AssetInId)
	return ret, err
}

func (m *defaultBillTypeModel) Update(ctx context.Context, data *BillType) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, billTypeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.BillType, data.AssetOutId, data.AssetInId)
	return err
}

func (m *defaultBillTypeModel) tableName() string {
	return m.table
}
