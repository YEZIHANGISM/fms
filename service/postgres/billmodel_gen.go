// Code generated by goctl. DO NOT EDIT!

package postgres

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	billFieldNames          = builder.RawFieldNames(&Bill{}, true)
	billRows                = strings.Join(billFieldNames, ",")
	billRowsExpectAutoSet   = strings.Join(stringx.Remove(billFieldNames, "create_time", "update_time", "create_at", "update_at"), ",")
	billRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(billFieldNames, "id", "create_time", "update_time", "create_at", "update_at"))
)

type (
	billModel interface {
		Insert(ctx context.Context, data *Bill) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Bill, error)
		Update(ctx context.Context, data *Bill) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBillModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Bill struct {
		Id         int64          `db:"id"`
		BillbookId int64          `db:"billbook_id"`
		CategoryId int64          `db:"category_id"`
		BillTypeId int64          `db:"bill_type_id"`
		DebtId     sql.NullInt64  `db:"debt_id"`
		Amount     sql.NullInt64  `db:"amount"`
		Remark     sql.NullString `db:"remark"`
		BillDate   time.Time      `db:"bill_date"`
		CreatedAt  time.Time      `db:"created_at"`
		UpdatedAt  sql.NullTime   `db:"updated_at"`
		IsDeleted  bool           `db:"is_deleted"`
	}
)

func newBillModel(conn sqlx.SqlConn) *defaultBillModel {
	return &defaultBillModel{
		conn:  conn,
		table: `"public"."bill"`,
	}
}

func (m *defaultBillModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultBillModel) FindOne(ctx context.Context, id int64) (*Bill, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", billRows, m.table)
	var resp Bill
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBillModel) Insert(ctx context.Context, data *Bill) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)", m.table, billRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.BillbookId, data.CategoryId, data.BillTypeId, data.DebtId, data.Amount, data.Remark, data.BillDate, data.CreatedAt, data.UpdatedAt, data.IsDeleted)
	return ret, err
}

func (m *defaultBillModel) Update(ctx context.Context, data *Bill) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, billRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.BillbookId, data.CategoryId, data.BillTypeId, data.DebtId, data.Amount, data.Remark, data.BillDate, data.CreatedAt, data.UpdatedAt, data.IsDeleted)
	return err
}

func (m *defaultBillModel) tableName() string {
	return m.table
}
